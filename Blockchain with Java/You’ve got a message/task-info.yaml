type: edu
files:
  - name: src/blockchain/Main.java
    visible: true
    text: |
      package blockchain;
      
      public class Main {
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: test/BlockchainTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Locale;
      import java.util.Objects;
      import java.util.stream.Collectors;
      
      
      class BlockParseException extends Exception {
          BlockParseException(String msg) {
              super(msg);
          }
      }
      
      
      class Block {
      
          int id;
          long timestamp;
          long magic;
          String hashprev;
          String hash;
      
          static ArrayList<String> minerIds;
          static ArrayList<String> dataStrs;
      
      
          static Block parseBlock(String strBlock) throws BlockParseException {
              if (strBlock.length() == 0) {
                  return null;
              }
      
              if (!(strBlock.contains("Block:")
                      && strBlock.contains("Timestamp:"))) {
      
                  return null;
              }
      
              Block block = new Block();
      
              List<String> lines = strBlock
                      .lines()
                      .map(String::strip)
                      .filter(e -> e.length() > 0)
                      .collect(Collectors.toList());
      
              if (lines.size() < 12) {
                  throw new BlockParseException("Every block should " +
                          "contain at least 12 lines of data");
              }
      
              if (!lines.get(0).equals("Block:")) {
                  throw new BlockParseException("First line of every block " +
                          "should be \"Block:\"");
              }
      
              if (!lines.get(1).startsWith("Created by")) {
                  throw new BlockParseException("Second line of every block " +
                          "should start with \"Created by\"");
              }
      
              minerIds.add(lines.get(1));
      
              if (!lines.get(2).startsWith("Id:")) {
                  throw new BlockParseException("Third line of every block " +
                          "should start with \"Id:\"");
              }
      
              String id = lines.get(2).split(":")[1]
                      .strip().replace("-", "");
              boolean isNumeric = id.chars().allMatch(Character::isDigit);
      
              if (!isNumeric) {
                  throw new BlockParseException("Id should be a number");
              }
      
              block.id = Integer.parseInt(id);
      
      
      
              if (!lines.get(3).startsWith("Timestamp:")) {
                  throw new BlockParseException("4-th line of every block " +
                          "should start with \"Timestamp:\"");
              }
      
              String timestamp = lines.get(3).split(":")[1]
                      .strip().replace("-", "");
              isNumeric = timestamp.chars().allMatch(Character::isDigit);
      
              if (!isNumeric) {
                  throw new BlockParseException("Timestamp should be a number");
              }
      
              block.timestamp = Long.parseLong(timestamp);
      
      
              if (!lines.get(4).startsWith("Magic number:")) {
                  throw new BlockParseException("5-th line of every block " +
                          "should start with \"Magic number:\"");
              }
      
              String magic = lines.get(4).split(":")[1]
                      .strip().replace("-", "");
              isNumeric = magic.chars().allMatch(Character::isDigit);
      
              if (!isNumeric) {
                  throw new BlockParseException("Magic number should be a number");
              }
      
              block.magic = Long.parseLong(magic);
      
      
      
              if (!lines.get(5).equals("Hash of the previous block:")) {
                  throw new BlockParseException("6-th line of every block " +
                          "should be \"Hash of the previous block:\"");
              }
      
              if (!lines.get(7).equals("Hash of the block:")) {
                  throw new BlockParseException("8-th line of every block " +
                          "should be \"Hash of the block:\"");
              }
      
              String prevhash = lines.get(6).strip();
              String hash = lines.get(8).strip();
      
              if (!(prevhash.length() == 64 || prevhash.equals("0"))
                      || !(hash.length() == 64)) {
      
                  throw new BlockParseException("Hash length should " +
                          "be equal to 64 except \"0\"");
              }
      
              block.hash = hash;
              block.hashprev = prevhash;
      
              if (!lines.get(9).startsWith("Block data:")) {
                  throw new BlockParseException("10-th line of every block " +
                          "should start with \"Block data:\"");
              }
      
              int i;
              StringBuilder dataStr = new StringBuilder(lines.get(9));
              for (i=10; i < lines.size(); i++){
                  if (lines.get(i).toLowerCase().contains("block") && lines.get(i).toLowerCase().contains("generating")){
                      break;
                  }
                  dataStr.append(lines.get(i));
              }
              dataStrs.add(dataStr.toString());
      
              if (!lines.get(i).toLowerCase().contains("block") && !lines.get(i).toLowerCase().contains("generating")){
                  throw new BlockParseException("Second-last line of every block " +
                          "should say how long the block was generating for! (Use the example's format)");
              }
      
              if (i + 1 >= lines.size()){
                  throw new BlockParseException("There should be two lines after the block data.. " +
                          "one for generating time and one for N's status update.");
              }
      
              if (!lines.get(i+1).toUpperCase().startsWith("N ")) {
                  throw new BlockParseException("11-th line of every block " +
                          "should be state what happened to N in the format given.");
              }
      
              return block;
          }
      
      
          static List<Block> parseBlocks(String output) throws BlockParseException {
              minerIds = new ArrayList<String>();
              dataStrs = new ArrayList<String>();
      
              String[] strBlocks = output.split("\n\n");
      
              List<Block> blocks = new ArrayList<>();
      
              for (String strBlock : strBlocks) {
                  Block block = parseBlock(strBlock.strip());
                  if (block != null) {
                      blocks.add(block);
                  }
              }
      
              String firstMiner = minerIds.get(0);
              minerIds.removeIf(s -> Objects.equals(s, firstMiner));
              if (minerIds.size() == 0){
                  throw new BlockParseException("All blocks are mined by a single miner!");
              }
      
              String firstData = dataStrs.get(0);
              dataStrs.removeIf(s -> Objects.equals(s, firstData));
              if (dataStrs.size() == 0){
                  throw new BlockParseException("All blocks contain the same data!");
              }
      
              return blocks;
          }
      }
      
      class Clue {
          String zeros;
          Clue(int n) {
              zeros = "0".repeat(n);
          }
      }
      
      
      public class BlockchainTest extends StageTest<Clue> {
      
          List<String> previousOutputs = new ArrayList<>();
      
          @Override
          public List<TestCase<Clue>> generate() {
              return List.of(
                      new TestCase<>(),
                      new TestCase<>()
              );
          }
      
          @Override
          public CheckResult check(String reply, Clue clue) {
      
              if (previousOutputs.contains(reply)) {
                  return new CheckResult(false,
                          "You already printed this text in the previous tests");
              }
      
              previousOutputs.add(reply);
      
              List<Block> blocks;
              try {
                  blocks = Block.parseBlocks(reply);
              } catch (BlockParseException ex) {
                  return new CheckResult(false, ex.getMessage());
              } catch (Exception ex) {
                  return CheckResult.wrong("");
              }
      
              if (blocks.size() != 5) {
                  return new CheckResult(false,
                          "You should output 5 blocks, found " + blocks.size());
              }
      
              for (int i = 1; i < blocks.size(); i++) {
                  Block curr = blocks.get(i - 1);
                  Block next = blocks.get(i);
      
                  if (curr.id + 1 != next.id) {
                      return new CheckResult(false,
                              "Id`s of blocks should increase by 1");
                  }
      
                  if (next.timestamp < curr.timestamp) {
                      return new CheckResult(false,
                              "Timestamp`s of blocks should increase");
                  }
      
                  if (!next.hashprev.equals(curr.hash)) {
                      return new CheckResult(false, "Two hashes aren't equal, " +
                              "but should");
                  }
              }
      
      
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/blockchain/StringUtil.java
    visible: true
    text: |-
      package blockchain;
      
      
      import java.security.MessageDigest;
      
      class StringUtil {
          /* Applies Sha256 to a string and returns a hash. */
          public static String applySha256(String input){
              try {
                  MessageDigest digest = MessageDigest.getInstance("SHA-256");
                  /* Applies sha256 to our input */
                  byte[] hash = digest.digest(input.getBytes("UTF-8"));
                  StringBuilder hexString = new StringBuilder();
                  for (byte elem: hash) {
                      String hex = Integer.toHexString(0xff & elem);
                      if(hex.length() == 1) hexString.append('0');
                      hexString.append(hex);
                  }
                  return hexString.toString();
              }
              catch(Exception e) {
                  throw new RuntimeException(e);
              }
          }
      }
    learner_created: true
  - name: src/blockchain/Blockchain.java
    visible: true
    text: |-
      package blockchain;
      
      import java.util.ArrayList;
      import java.util.List;
      
      public class Blockchain {
          List<Block> blocks;
          int N = 0;
      
          public Blockchain(int minerId, int magicNumber, long generationTime, int nValue) {
              blocks = new ArrayList<>();
              blocks.add(new Block(1, "0", minerId, magicNumber, generationTime, nValue));
          }
      
          public synchronized void addBlockSynchronized(Block block) {
              if (isValidNewBlock(block)) {
                  blocks.add(block);
                  adjustN(block.getGenerationTime());
              }
          }
      
          public boolean isValidNewBlock(Block newBlock) {
              Block lastBlock = blocks.get(blocks.size() - 1);
              return newBlock.getPrevHash().equals(lastBlock.getHash()) && newBlock.getHash().startsWith("0".repeat(N));
          }
      
          public void adjustN(long generationTime) {
              if (generationTime < 1) {
                  N++;
              } else if (generationTime > 2) {
                  if (N > 0) {
                      N--;
                  }
              }
          }
      
          public int getN() {
              return N;
          }
      
          public Block getLastBlock() {
              return blocks.get(blocks.size() - 1);
          }
      }
    learner_created: true
  - name: src/blockchain/Miner.java
    visible: true
    text: |-
      package blockchain;
      
      public class Miner implements Runnable {
          private int id;
          private Blockchain blockchain;
      
          Miner(int id, Blockchain blockchain) {
              this.id = id;
              this.blockchain = blockchain;
          }
      
          @Override
          public void run() {
              while (true) {
                  Block lastBlock = blockchain.getLastBlock();
                  int newId = lastBlock.getId() + 1;
                  String prevHash = lastBlock.getHash();
                  long startTime = System.currentTimeMillis();
                  int magicNumber = findMagicNumber(prevHash, blockchain.getN());
                  long generationTime = (System.currentTimeMillis() - startTime) / 1000;
                  Block newBlock = new Block(newId, prevHash, id, magicNumber, generationTime, blockchain.getN());
                  blockchain.addBlockSynchronized(newBlock);
                  if (blockchain.blocks.size() >= 5) {
                      break;
                  }
              }
          }
      
          private int findMagicNumber(String prevHash, int N) {
              int magicNumber = 0;
              while (true) {
                  String hash = StringUtil.applySha256(prevHash + magicNumber);
                  if (hash.startsWith("0".repeat(N))) {
                      break;
                  }
                  magicNumber++;
              }
              return magicNumber;
          }
      }
    learner_created: true
  - name: src/blockchain/Block.java
    visible: true
    text: |-
      package blockchain;
      
      import java.util.Date;
      
      public class Block {
          private int id;
          private long timestamp;
          private String prevHash;
          private String hash;
          private int minerId;
          private int magicNumber;
          private long generationTime;
          private int nValue;
      
          public Block(int id, String prevHash, int minerId, int magicNumber, long generationTime, int nValue) {
              this.id = id;
              this.prevHash = prevHash;
              this.timestamp = new Date().getTime();
              this.minerId = minerId;
              this.magicNumber = magicNumber;
              this.generationTime = generationTime;
              this.nValue = nValue;
              this.hash = calculateHash();
          }
      
          public String calculateHash() {
              return StringUtil.applySha256(id + prevHash + timestamp + minerId + magicNumber + generationTime + nValue);
              // Implementation of hash calculation...
          }
      
      
          public String getHash() {
              return this.hash;
          }
      
          public String getPrevHash() {
              return this.prevHash;
          }
      
          public long getGenerationTime() {
              return this.generationTime;
          }
      
          public int getId() {
              return this.id;
          }
      
          @Override
          public String toString() {
              return "Block:\n" +
                      "Created by miner # " + minerId + "\n" +
                      "Id: " + id + "\n" +
                      "Timestamp: " + timestamp + "\n" +
                      "Magic number: " + magicNumber + "\n" +
                      "Hash of the previous block:\n" +
                      prevHash + "\n" +
                      "Hash of the block:\n" +
                      hash + "\n" +
                      "Block was generating for " + generationTime + " seconds\n" +
                      "N was increased to " + nValue + "\n";
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/274/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #1

    Every block should contain at least 12 lines of data

    Please find below the output of your program during this failed test.

    ---

    Block:
    Created by miner # 1
    Id: 1
    Timestamp: 1713214036863
    Magic number: 0
    Hash of the previous block:
    0
    Hash of the block:
    6e74b81f5ae907b77b4dbd6184ce1e7ad641722203032d0383d715c9494c8ce8
    Block was generating for 0 seconds
    N was increased to 0

    Block:
    Created by miner # 5
    Id: 2
    Timestamp: 1713214036887
    Magic number: 0
    Hash of the previous block:
    6e74b81f5ae907b77b4dbd6184ce1e7ad641722203032d0383d715c9494c8ce8
    Hash of the block:
    5b7ee8eb33325828e8895d7689b147bf0734a4536fe60f7c216dd1c225508f49
    Block was generating for 0 seconds
    N was increased to 0

    Block:
    Created by miner # 5
    Id: 3
    Timestamp: 1713214036888
    Magic number: 1
    Hash of the previous block:
    5b7ee8eb33325828e8895d7689b147bf0734a4536fe60f7c216dd1c225508f49
    Hash of the block:
    08346108f2a30e0e2ec8d9e6a1f39d8e371b26127e23bcd3c97d9520935b4f60
    Block was generating for 0 seconds
    N was increased to 1

    Block:
    Created by miner # 5
    Id: 4
    Timestamp: 1713214038711
    Magic number: 752
    Hash of the previous block:
    08346108f2a30e0e2ec8d9e6a1f39d8e371b26127e23bcd3c97d9520935b4f60
    Hash of the block:
    00f64e79833a521c6d3f45605b6eb986ffab97dda621d39424b5f07de0140ded
    Block was generating for 0 seconds
    N was increased to 2

    Block:
    Created by miner # 8
    Id: 5
    Timestamp: 1713214044547
    Magic number: 4699
    Hash of the previous block:
    00f64e79833a521c6d3f45605b6eb986ffab97dda621d39424b5f07de0140ded
    Hash of the block:
    000f55ed8cb46e5dabd76dddfd68458e617d263527fa18424a7d0e3613f3078d
    Block was generating for 0 seconds
    N was increased to 3
  time: "Mon, 15 Apr 2024 20:47:25 UTC"
record: 4
