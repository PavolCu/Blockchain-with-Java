type: edu
files:
  - name: src/blockchain/Main.java
    visible: true
    text: |
      package blockchain;
      
      public class Main {
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: test/BlockchainTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Objects;
      import java.util.stream.Collectors;
      
      
      class BlockParseException extends Exception {
          BlockParseException(String msg) {
              super(msg);
          }
      }
      
      
      class Block {
      
          int id;
          long timestamp;
          long magic;
          String hashprev;
          String hash;
      
          static ArrayList<String> minerIds;
      
          static Block parseBlock(String strBlock) throws BlockParseException {
              if (strBlock.length() == 0) {
                  return null;
              }
      
              if (!(strBlock.contains("Block:")
                      && strBlock.contains("Timestamp:"))) {
      
                  return null;
              }
      
              Block block = new Block();
      
              List<String> lines = strBlock
                      .lines()
                      .map(String::strip)
                      .filter(e -> e.length() > 0)
                      .collect(Collectors.toList());
      
              if (lines.size() != 11) {
                  throw new BlockParseException("Every block should " +
                          "contain 11 lines of data");
              }
      
              if (!lines.get(0).equals("Block:")) {
                  throw new BlockParseException("First line of every block " +
                          "should be \"Block:\"");
              }
      
              if (!lines.get(1).startsWith("Created by")) {
                  throw new BlockParseException("Second line of every block " +
                          "should start with \"Created by\"");
              }
      
              minerIds.add(lines.get(1));
      
              if (!lines.get(2).startsWith("Id:")) {
                  throw new BlockParseException("Third line of every block " +
                          "should start with \"Id:\"");
              }
      
              String id = lines.get(2).split(":")[1]
                      .strip().replace("-", "");
              boolean isNumeric = id.chars().allMatch(Character::isDigit);
      
              if (!isNumeric) {
                  throw new BlockParseException("Id should be a number");
              }
      
              block.id = Integer.parseInt(id);
      
      
      
              if (!lines.get(3).startsWith("Timestamp:")) {
                  throw new BlockParseException("4-th line of every block " +
                          "should start with \"Timestamp:\"");
              }
      
              String timestamp = lines.get(3).split(":")[1]
                      .strip().replace("-", "");
              isNumeric = timestamp.chars().allMatch(Character::isDigit);
      
              if (!isNumeric) {
                  throw new BlockParseException("Timestamp should be a number");
              }
      
              block.timestamp = Long.parseLong(timestamp);
      
      
              if (!lines.get(4).startsWith("Magic number:")) {
                  throw new BlockParseException("5-th line of every block " +
                          "should start with \"Magic number:\"");
              }
      
              String magic = lines.get(4).split(":")[1]
                      .strip().replace("-", "");
              isNumeric = magic.chars().allMatch(Character::isDigit);
      
              if (!isNumeric) {
                  throw new BlockParseException("Magic number should be a number");
              }
      
              block.magic = Long.parseLong(magic);
      
      
      
              if (!lines.get(5).equals("Hash of the previous block:")) {
                  throw new BlockParseException("6-th line of every block " +
                          "should be \"Hash of the previous block:\"");
              }
      
              if (!lines.get(7).equals("Hash of the block:")) {
                  throw new BlockParseException("8-th line of every block " +
                          "should be \"Hash of the block:\"");
              }
      
              if (!lines.get(10).toUpperCase().startsWith("N ")) {
                  throw new BlockParseException("11-th line of every block " +
                          "should be state what happened to N");
              }
      
              String prevhash = lines.get(6).strip();
              String hash = lines.get(8).strip();
      
              if (!(prevhash.length() == 64 || prevhash.equals("0"))
                      || !(hash.length() == 64)) {
      
                  throw new BlockParseException("Hash length should " +
                          "be equal to 64 except \"0\"");
              }
      
              block.hash = hash;
              block.hashprev = prevhash;
      
              return block;
          }
      
      
          static List<Block> parseBlocks(String output) throws BlockParseException {
              minerIds = new ArrayList<String>();
      
              String[] strBlocks = output.split("\n\n");
      
              List<Block> blocks = new ArrayList<>();
      
              for (String strBlock : strBlocks) {
                  Block block = parseBlock(strBlock.strip());
                  if (block != null) {
                      blocks.add(block);
                  }
              }
      
              String firstMiner = minerIds.get(0);
              minerIds.removeIf(s -> Objects.equals(s, firstMiner));
              if (minerIds.size() == 0){
                  throw new BlockParseException("All blocks are mined by a single miner!");
              }
      
              return blocks;
          }
      }
      
      class Clue {
          String zeros;
          Clue(int n) {
              zeros = "0".repeat(n);
          }
      }
      
      
      public class BlockchainTest extends StageTest<Clue> {
      
          List<String> previousOutputs = new ArrayList<>();
      
          @Override
          public List<TestCase<Clue>> generate() {
              return List.of(
                      new TestCase<>(),
                      new TestCase<>()
              );
          }
      
          @Override
          public CheckResult check(String reply, Clue clue) {
      
              if (previousOutputs.contains(reply)) {
                  return new CheckResult(false,
                          "You already printed this text in the previous tests");
              }
      
              previousOutputs.add(reply);
      
              List<Block> blocks;
              try {
                  blocks = Block.parseBlocks(reply);
              } catch (BlockParseException ex) {
                  return new CheckResult(false, ex.getMessage());
              } catch (Exception ex) {
                  return CheckResult.wrong("");
              }
      
              if (blocks.size() != 5) {
                  return new CheckResult(false,
                          "You should output 5 blocks, found " + blocks.size());
              }
      
              for (int i = 1; i < blocks.size(); i++) {
                  Block curr = blocks.get(i - 1);
                  Block next = blocks.get(i);
      
                  if (curr.id + 1 != next.id) {
                      return new CheckResult(false,
                              "Id`s of blocks should increase by 1");
                  }
      
                  if (next.timestamp < curr.timestamp) {
                      return new CheckResult(false,
                              "Timestamp`s of blocks should increase");
                  }
      
                  if (!next.hashprev.equals(curr.hash)) {
                      return new CheckResult(false, "Two hashes aren't equal, " +
                              "but should");
                  }
              }
      
      
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/blockchain/StringUtil.java
    visible: true
    text: |-
      package blockchain;
      
      
      import java.security.MessageDigest;
      
      class StringUtil {
          /* Applies Sha256 to a string and returns a hash. */
          public static String applySha256(String input){
              try {
                  MessageDigest digest = MessageDigest.getInstance("SHA-256");
                  /* Applies sha256 to our input */
                  byte[] hash = digest.digest(input.getBytes("UTF-8"));
                  StringBuilder hexString = new StringBuilder();
                  for (byte elem: hash) {
                      String hex = Integer.toHexString(0xff & elem);
                      if(hex.length() == 1) hexString.append('0');
                      hexString.append(hex);
                  }
                  return hexString.toString();
              }
              catch(Exception e) {
                  throw new RuntimeException(e);
              }
          }
      }
    learner_created: true
  - name: src/blockchain/Blockchain.java
    visible: true
    text: |+
      package blockchain;
      
      import java.util.ArrayList;
      import java.util.List;
      
      public class Blockchain {
          List<Block> blocks;
          int difficulty;
      
          public Blockchain(int difficulty) {
              this.difficulty = difficulty;
              blocks = new ArrayList<>();
              Block genesisBlock = new Block(1, "0");
              genesisBlock.mineBlock(difficulty);
              blocks.add(genesisBlock);
          }
      
          public void addBlock() {
              int newId = blocks.size() + 1;
              String prevHash = blocks.get(blocks.size() - 1).hash;
              Block newBlock = new Block(newId, prevHash);
              newBlock.mineBlock(difficulty);
              blocks.add(newBlock);
          }
      
          public boolean isValid() {
              for (int i = 1; i < blocks.size(); i++) {
                  Block currentBlock = blocks.get(i);
                  Block previousBlock = blocks.get(i - 1);
      
                  if (!currentBlock.hash.equals(currentBlock.calculateHash())) {
                      return false;
                  }
      
                  if (!currentBlock.prevHash.equals(previousBlock.hash)) {
                      return false;
                  }
              }
              return true;
          }
      }
    
    learner_created: true
  - name: src/blockchain/Block.java
    visible: true
    text: |-
      package blockchain;
      
      import java.security.MessageDigest;
      import java.util.Date;
      import java.util.Random;
      
      public class Block {
          int id;
          long timestamp;
          String prevHash;
          String hash;
          int magicNumber;
          long generationTime;
      
          public Block(int id, String prevHash) {
              this.id = id;
              this.timestamp = new Date().getTime();
              this.prevHash = prevHash;
              this.magicNumber = new Random().nextInt();
              this.hash = calculateHash();
          }
      
          public String calculateHash() {
              return StringUtil.applySha256(id + Long.toString(timestamp) + prevHash + magicNumber);
          }
      
          public void mineBlock(int difficulty) {
              String target = new String(new char[difficulty]).replace('\0', '0');
              long startTime = System.currentTimeMillis();
              while (!hash.substring(0, difficulty).equals(target)) {
                  magicNumber++;
                  hash = calculateHash();
              }
              long endTime = System.currentTimeMillis();
              generationTime = (endTime - startTime) / 1000; // convert to seconds
          }
      
          @Override
          public String toString() {
              return String.format("""
                      Block:
                      Id: %d
                      Timestamp: %d
                      Magic number: %d
                      Hash of the previous block:\u0020
                      %s
                      Hash of the block:\u0020
                      %s
                      Block was generating for %d seconds
                      """, id, timestamp, magicNumber, prevHash, hash, generationTime);
          }
      }
    learner_created: true
  - name: src/blockchain/Miner.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5415#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 15 Apr 2024 21:04:53 UTC"
record: 2
